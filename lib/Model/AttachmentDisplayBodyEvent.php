<?php
/**
 * AttachmentDisplayBodyEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Klarna Payments API V1
 *
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout.  As soon as the purchase is completed the order should be read and handled using theÂ [`Order Management API`](/order-management/api/).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.32
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AttachmentDisplayBodyEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttachmentDisplayBodyEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'attachment_display_body_event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_name' => 'string',
'event_company' => 'string',
'genre_of_event' => 'string',
'arena_name' => 'string',
'arena_location' => '\Swagger\Client\Model\AttachmentDisplayBodyArenaLocation',
'start_time' => '\DateTime',
'end_time' => '\DateTime',
'access_controlled_venue' => 'bool',
'ticket_delivery_method' => 'string',
'ticket_delivery_recipient' => 'string',
'affiliate_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_name' => null,
'event_company' => null,
'genre_of_event' => null,
'arena_name' => null,
'arena_location' => null,
'start_time' => 'date-time',
'end_time' => 'date-time',
'access_controlled_venue' => null,
'ticket_delivery_method' => null,
'ticket_delivery_recipient' => null,
'affiliate_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_name' => 'event_name',
'event_company' => 'event_company',
'genre_of_event' => 'genre_of_event',
'arena_name' => 'arena_name',
'arena_location' => 'arena_location',
'start_time' => 'start_time',
'end_time' => 'end_time',
'access_controlled_venue' => 'access_controlled_venue',
'ticket_delivery_method' => 'ticket_delivery_method',
'ticket_delivery_recipient' => 'ticket_delivery_recipient',
'affiliate_name' => 'affiliate_name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_name' => 'setEventName',
'event_company' => 'setEventCompany',
'genre_of_event' => 'setGenreOfEvent',
'arena_name' => 'setArenaName',
'arena_location' => 'setArenaLocation',
'start_time' => 'setStartTime',
'end_time' => 'setEndTime',
'access_controlled_venue' => 'setAccessControlledVenue',
'ticket_delivery_method' => 'setTicketDeliveryMethod',
'ticket_delivery_recipient' => 'setTicketDeliveryRecipient',
'affiliate_name' => 'setAffiliateName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_name' => 'getEventName',
'event_company' => 'getEventCompany',
'genre_of_event' => 'getGenreOfEvent',
'arena_name' => 'getArenaName',
'arena_location' => 'getArenaLocation',
'start_time' => 'getStartTime',
'end_time' => 'getEndTime',
'access_controlled_venue' => 'getAccessControlledVenue',
'ticket_delivery_method' => 'getTicketDeliveryMethod',
'ticket_delivery_recipient' => 'getTicketDeliveryRecipient',
'affiliate_name' => 'getAffiliateName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_company'] = isset($data['event_company']) ? $data['event_company'] : null;
        $this->container['genre_of_event'] = isset($data['genre_of_event']) ? $data['genre_of_event'] : null;
        $this->container['arena_name'] = isset($data['arena_name']) ? $data['arena_name'] : null;
        $this->container['arena_location'] = isset($data['arena_location']) ? $data['arena_location'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['access_controlled_venue'] = isset($data['access_controlled_venue']) ? $data['access_controlled_venue'] : null;
        $this->container['ticket_delivery_method'] = isset($data['ticket_delivery_method']) ? $data['ticket_delivery_method'] : null;
        $this->container['ticket_delivery_recipient'] = isset($data['ticket_delivery_recipient']) ? $data['ticket_delivery_recipient'] : null;
        $this->container['affiliate_name'] = isset($data['affiliate_name']) ? $data['affiliate_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name Name of the event, e.g. \"Fancy Singer\"
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_company
     *
     * @return string
     */
    public function getEventCompany()
    {
        return $this->container['event_company'];
    }

    /**
     * Sets event_company
     *
     * @param string $event_company Name of the company arranging the event, e.g. \"Happy Parties Ltd.\"
     *
     * @return $this
     */
    public function setEventCompany($event_company)
    {
        $this->container['event_company'] = $event_company;

        return $this;
    }

    /**
     * Gets genre_of_event
     *
     * @return string
     */
    public function getGenreOfEvent()
    {
        return $this->container['genre_of_event'];
    }

    /**
     * Sets genre_of_event
     *
     * @param string $genre_of_event Category or type of venue, \"Pop\"
     *
     * @return $this
     */
    public function setGenreOfEvent($genre_of_event)
    {
        $this->container['genre_of_event'] = $genre_of_event;

        return $this;
    }

    /**
     * Gets arena_name
     *
     * @return string
     */
    public function getArenaName()
    {
        return $this->container['arena_name'];
    }

    /**
     * Sets arena_name
     *
     * @param string $arena_name Name of the venue, \"Song Arena\"
     *
     * @return $this
     */
    public function setArenaName($arena_name)
    {
        $this->container['arena_name'] = $arena_name;

        return $this;
    }

    /**
     * Gets arena_location
     *
     * @return \Swagger\Client\Model\AttachmentDisplayBodyArenaLocation
     */
    public function getArenaLocation()
    {
        return $this->container['arena_location'];
    }

    /**
     * Sets arena_location
     *
     * @param \Swagger\Client\Model\AttachmentDisplayBodyArenaLocation $arena_location arena_location
     *
     * @return $this
     */
    public function setArenaLocation($arena_location)
    {
        $this->container['arena_location'] = $arena_location;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time ISO 8601 e.g. 2012-11-24T15:00
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time ISO 8601 e.g. 2012-11-24T15:00
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets access_controlled_venue
     *
     * @return bool
     */
    public function getAccessControlledVenue()
    {
        return $this->container['access_controlled_venue'];
    }

    /**
     * Sets access_controlled_venue
     *
     * @param bool $access_controlled_venue Tickets are digitally checked when enetering the venue
     *
     * @return $this
     */
    public function setAccessControlledVenue($access_controlled_venue)
    {
        $this->container['access_controlled_venue'] = $access_controlled_venue;

        return $this;
    }

    /**
     * Gets ticket_delivery_method
     *
     * @return string
     */
    public function getTicketDeliveryMethod()
    {
        return $this->container['ticket_delivery_method'];
    }

    /**
     * Sets ticket_delivery_method
     *
     * @param string $ticket_delivery_method ticket_delivery_method
     *
     * @return $this
     */
    public function setTicketDeliveryMethod($ticket_delivery_method)
    {
        $this->container['ticket_delivery_method'] = $ticket_delivery_method;

        return $this;
    }

    /**
     * Gets ticket_delivery_recipient
     *
     * @return string
     */
    public function getTicketDeliveryRecipient()
    {
        return $this->container['ticket_delivery_recipient'];
    }

    /**
     * Sets ticket_delivery_recipient
     *
     * @param string $ticket_delivery_recipient The name of the recipient the ticket is delivered to. If email or phone, then use either the email address or the phone number.
     *
     * @return $this
     */
    public function setTicketDeliveryRecipient($ticket_delivery_recipient)
    {
        $this->container['ticket_delivery_recipient'] = $ticket_delivery_recipient;

        return $this;
    }

    /**
     * Gets affiliate_name
     *
     * @return string
     */
    public function getAffiliateName()
    {
        return $this->container['affiliate_name'];
    }

    /**
     * Sets affiliate_name
     *
     * @param string $affiliate_name Name of the affiliate that originated the purchase. If none, leave blank.
     *
     * @return $this
     */
    public function setAffiliateName($affiliate_name)
    {
        $this->container['affiliate_name'] = $affiliate_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
